////
/// @group 51. マップ
////

/// マップの要素の値を変更する<br>
/// 更対象の要素が存在しない場合、新たに要素を追加する
///
/// @param {map} $map
///   操作対象のマップ
/// @param {string} $key
///   変更対象要素のキー
/// @param {*} $value
///   変更対象要素に設定する値
///
/// @return {map} 要素の値を変更、または要素を追加したマップ
///
/// @example scss
///   $map: (
///     "white": #fff,
///     "black": #000
///   );
///   @debug map-set($map, "black", #333);
///   // (
///   //   "white": #fff,
///   //   "black": #333
///   // );

@function map-set($map, $key, $value) {
  @return map-merge(
    $map,
    (
      $key: $value,
    )
  );
}

/// 多次元構造のマップの、要素の値を変更する<br>
/// 変更対象の要素が存在しない場合、新たに要素を追加する
///
/// @param {map} $map
///   操作対象のマップ
/// @param {可変長引数} $keys...
///   目的の要素までのキーを、1次元目から順に指定する<br>
///   可変長引数の最後の値は、変更対象要素に設定する値となる
///
/// @return {map}
///   要素の値を変更、または要素を追加したマップ
///
/// @example scss
///   $map: (
///     "columns": 12,
///     "layouts": (
///       "small": 800px,
///       "medium": 1000px,
///       "large": 1200px
///     )
///   );
///   @debug map-deep-set($map, "layouts", "small", 600px);
///   // (
///   //   "columns": 12,
///   //   "layouts": (
///   //     "small": 600px,
///   //     "medium": 1000px,
///   //     "large": 1200px
///   //   )
///   // );

@function map-deep-set($map, $keys...) {
  $map-list: ();
  $map-list: append($map-list, $map);
  $result: null;
  @if length($keys) == 2 {
    @return map-merge(
      $map,
      (
        nth($keys, 1): nth($keys, -1),
      )
    );
  }
  @for $i from 1 through length($keys) - 2 {
    $map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));
  }
  @for $i from length($map-list) through 1 {
    $result: map-merge(
      nth($map-list, $i),
      (
        nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result),
      )
    );
  }
  @return $result;
}

/// 多次元構造のマップから、要素の値を取得する
///
/// @param {map} $map
///   操作対象のマップ
/// @param {可変長引数} $keys...
///   目的の要素までのキーを、1次元目から順に指定する
///
/// @return {*}
///   要素の値
///
/// @example scss
///   $map: (
///     "columns": 12,
///     "layouts": (
///       "small": 800px,
///       "medium": 1000px,
///       "large": 1200px
///     )
///   );
///   @debug map-deep-get($map, "layouts", "small"); // 800px

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

/// マップから、指定したキーの次の要素のキーを取得する<br>
/// 指定したキーが、マップの最後の要素である場合は、`null`を返す
///
/// @param {map} $map
///   操作対象のマップ
/// @param {string} $key
///   取得対象要素の前の要素のキー
///
/// @return {string | null}
///   取得対象要素のキー、または`null`
///
/// @example scss
///   $map: ("A": 1, "B": 2, "C": 3);
///   @debug map-get-next-key("B", $map); // C
///   @debug map-get-next-key("C", $map); // null

@function map-get-next-key($map, $key) {
  $keys: map-keys($map);
  $index: index($keys, $key);
  @return if($index < length($keys), nth($keys, $index + 1), null);
}

/// マップから、指定したキーの前の要素のキーを取得する<br>
/// 指定したキーが、マップの最初の要素である場合は、`null`を返す
///
/// @param {map} $map
///   操作対象のマップ
/// @param {string} $key
///   取得対象要素の次の要素のキー
///
/// @return {string | null}
///   取得対象要素のキー、または`null`
///
/// @example scss
///   $map: ("A": 1, "B": 2, "C": 3);
///   @debug map-get-prev-key("B", $map); // "A"
///   @debug map-get-prev-key("A", $map); // null

@function map-get-prev-key($map, $key) {
  $keys: map-keys($map);
  $index: index($keys, $key);
  @return if($index > 1, nth($keys, $index - 1), null);
}
