@charset "utf-8";

////
//// @group 01. Flexboxグリッド
////

/// グリッドコンテナー
///
/// @since 1.2.0
///
/// @param {string | null} $direction [null]
/// 	<a href="#01. flexboxグリッド-mixin-grid-direction">`grid-direction()`</a>
/// @param {string | null} $horizontal [null]
/// 	<a href="#01. flexboxグリッド-mixin-grid-horizontal">`grid-horizontal()`</a>
/// @param {string | null} $vertical [null]
/// 	<a href="#01. flexboxグリッド-mixin-grid-vertical">`grid-vertical()`</a>
/// @param {string | null} $wrap [null]
/// 	<a href="#01. flexboxグリッド-mixin-grid-wrap">`grid-wrap()`</a>
/// @param {string | null} $gutter-width [null]
/// 	<a href="#01. flexboxグリッド-mixin-grid-gutters">`grid-gutters()`</a
///
/// @example scss
/// 	.grid-container {
/// 		@include grid-container(null, "center", "middle");
/// 	}
///
/// 	// CSS Output
/// 	.grid-container {
///			display: flex;
///			flex-direction: row;
///			justify-content: center;
///			align-items: center;
///			flex-wrap: nowrap;
///			margin-right: -1%;
///			margin-left: -1%;
/// 	}

@mixin grid-container($direction: null, $horizontal: null, $vertical: null, $wrap: null, $gutter-width: null) {
	// sass-lint:disable mixins-before-declarations
	display: flex;
	@include grid-direction($direction);
	@include grid-horizontal($horizontal);
	@include grid-vertical($vertical);
	@include grid-wrap($wrap);
	@include grid-gutters("container", $gutter-width);
}

/// グリッドアイテム
///
/// @since 1.2.0
///
/// @param {string | number | null} $columns [null]
/// 	<a href="#01. flexboxグリッド-mixin-grid-columns">`grid-columns()`</a>
/// @param {number | null} $offset [null]
/// 	<a href="#01. flexboxグリッド-mixin-grid-offset">`grid-offset()`</a>
/// @param {number | null} $order [null]
/// 	<a href="#01. flexboxグリッド-mixin-grid-order">`grid-order()`</a>
/// @param {number | null} $gutter-width [null]
/// 	<a href="#01. flexboxグリッド-mixin-grid-gutters">`grid-gutters()`</a>
/// @param {number} $grid-columns [$base-grid-columns]
/// 	グリッドの総カラム数
///
/// @example scss
/// 	.grid-item {
/// 		@include grid-item(12, 6);
/// 	}
///
/// 	// CSS Output
/// 	.grid-item {
/// 		max-width: 50%;
/// 		flex: 0 0 50%;
/// 		margin-left: 25%;
/// 		order: 0;
/// 		padding-right: 1%;
/// 		padding-left: 1%;
/// 	}

@mixin grid-item($columns: null, $offset: null, $order: null, $gutter-width: null, $grid-columns: $base-grid-columns) {
	// sass-lint:disable mixins-before-declarations
	box-sizing: border-box;
	@include grid-columns($columns, $grid-columns);
	@include grid-offset($offset, $grid-columns);
	@include grid-order($order);
	@include grid-gutters("item", $gutter-width);
}

/// グリッドアイテムの並び順を設定する
///
/// @since 1.2.0
///
/// @param {string} $direction ["row"]
/// 	<table class="item__parameters" style="margin-top: -.4em">
/// 		<thead><tr><th>値</th><th>説明</th></tr></thead>
/// 		<tbody>
/// 			<tr>
/// 				<td>`normal`</td>
/// 				<td>`flex-direction: row`</td>
/// 			</tr>
/// 			<tr>
/// 				<td>`reverse`</td>
/// 				<td>`flex-direction: row-reverse`</td>
/// 			</tr>
/// 		</tbody>
/// 	</table>
///
/// @example scss
/// 	.grid-container {
/// 		@include grid-direction("reverse");
/// 	}
///
/// 	// CSS Outout
/// 	.grid-container {
/// 		flex-direction: row-reverse;
/// 	}

@mixin grid-direction($direction: "row") {
	$direction: if($direction == null, "normal", $direction);
	$definition: (
		"normal":  "row",
		"reverse": "row-reverse"
	);
	flex-direction: unquote(map-get($definition, $direction));
}

/// justify-content
///
/// @since 1.2.0
///
/// @param {string} $horizontal ["start"]
/// 	<table class="item__parameters" style="margin-top: -.4em">
/// 		<thead><tr><th>値</th><th>説明</th></tr></thead>
/// 		<tbody>
/// 			<tr>
/// 				<td>`top`</td>
/// 				<td>`justify-content: flex-start`</td>
/// 			</tr>
/// 			<tr>
/// 				<td>`middle`</td>
/// 				<td>`justify-content: center`</td>
/// 			</tr>
/// 			<tr>
/// 				<td>`bottom`</td>
/// 				<td>`justify-content: flex-end`</td>
/// 			</tr>
/// 			<tr>
/// 				<td>`baseline`</td>
/// 				<td>`justify-content: space-between`</td>
/// 			</tr>
/// 			<tr>
/// 				<td>`stretch`</td>
/// 				<td>`justify-content: space-around`</td>
/// 			</tr>
/// 		</tbody>
/// 	</table>
///
/// @example scss
/// 	.grid-container {
/// 		@include grid-horizontal("center");
/// 	}
///
/// 	// CSS Outout
/// 	.grid-container {
/// 		justify-content: center;
/// 	}

@mixin grid-horizontal($horizontal: "start") {
	$horizontal: if($horizontal == null, "start", $horizontal);
	$definition: (
		"start":   "flex-start",
		"center":  "center",
		"end":     "flex-end",
		"between": "space-between",
		"around":  "space-around"
	);
	justify-content: unquote(map-get($definition, $horizontal));
}

/// align-items
///
/// @since 1.2.0
///
/// @param {string} $vertical ["top"]
/// 	<table class="item__parameters" style="margin-top: -.4em">
/// 		<thead><tr><th>値</th><th>説明</th></tr></thead>
/// 		<tbody>
/// 			<tr>
/// 				<td>`top`</td>
/// 				<td>`align-items: flex-start`</td>
/// 			</tr>
/// 			<tr>
/// 				<td>`middle`</td>
/// 				<td>`align-items: center`</td>
/// 			</tr>
/// 			<tr>
/// 				<td>`bottom`</td>
/// 				<td>`align-items: flex-end`</td>
/// 			</tr>
/// 			<tr>
/// 				<td>`baseline`</td>
/// 				<td>`align-items: baseline`</td>
/// 			</tr>
/// 			<tr>
/// 				<td>`stretch`</td>
/// 				<td>`align-items: stretch`</td>
/// 			</tr>
/// 		</tbody>
/// 	</table>
///
/// @example scss
/// 	.grid-container {
/// 		@include grid-vertical("bottom");
/// 	}
///
/// 	// CSS Outout
/// 	.grid-container {
/// 		align-items: flex-end;
/// 	}

@mixin grid-vertical($vertical: "top") {
	$vertical: if($vertical == null, "top", $vertical);
	$definition: (
		"top":      "flex-start",
		"middle":   "center",
		"bottom":   "flex-end",
		"baseline": "baseline",
		"stretch":  "stretch"
	);
	align-items: unquote(map-get($definition, $vertical));
}

/// flex-wrap and align-content
///
/// @since 1.2.0
///
/// @param {string} $wrap ["nowrap"]
/// 	<table class="item__parameters" style="margin-top: -.4em">
/// 		<thead><tr><th>値</th><th>説明</th></tr></thead>
/// 		<tbody>
/// 			<tr>
/// 				<td>`nowrap`</td>
/// 				<td>`flex-wrap: nowrap`</td>
/// 			</tr>
/// 			<tr>
/// 				<td>
/// 					`wrap`<br>
/// 					`wrap-reverse`<br>
/// 					`wrap-start`<br>
/// 					`wrap-reverse-start`
/// 				</td>
/// 				<td>
/// 					`flex-wrap: wrap | wrap-reverse`<br>
/// 					`align-content: flex-start`
/// 				</td>
/// 			</tr>
/// 			<tr>
/// 				<td>
/// 					`wrap-center`<br>
/// 					`wrap-reverse-center`
/// 				</td>
/// 				<td>
/// 					`flex-wrap: wrap | wrap-reverse`<br>
/// 					`align-content: center`
/// 				</td>
/// 			</tr>
/// 			<tr>
/// 				<td>
/// 					`wrap-end`<br>
/// 					`wrap-reverse-end`
/// 				</td>
/// 				<td>
/// 					`flex-wrap: wrap | wrap-reverse`<br>
/// 					`align-content: flex-end`
/// 				</td>
/// 			</tr>
/// 			<tr>
/// 				<td>
/// 					`wrap-between`<br>
/// 					`wrap-reverse-between`
/// 				</td>
/// 				<td>
/// 					`flex-wrap: wrap | wrap-reverse`<br>
/// 					`align-content: space-between`
/// 				</td>
/// 			</tr>
/// 			<tr>
/// 				<td>
/// 					`wrap-around`<br>
/// 					`wrap-reverse-around`
/// 				</td>
/// 				<td>
/// 					`flex-wrap: wrap | wrap-reverse`<br>
/// 					`align-content: space-around`
/// 				</td>
/// 			</tr>
/// 		</tbody>
/// 	</table>
///
/// @example scss
/// 	.grid-container {
/// 		@include grid-wrap("wrap-reverse-center");
/// 	}
///
/// 	// CSS Outout
/// 	.grid-container {
/// 		flex-wrap: wrap-reverse;
/// 		align-content: space-around;
/// 	}

@mixin grid-wrap($wrap: "nowrap") {
	$wrap: if($wrap == null, "nowrap", $wrap);
	@if $wrap == "nowrap" {
		flex-wrap: nowrap;
	}
	@elseif $wrap == "wrap" {
		flex-wrap: wrap;
		align-content: flex-start;
	}
	@elseif $wrap == "wrap-reverse" {
		flex-wrap: wrap-reverse;
		align-content: flex-start;
	}
	@else {
		$definition: (
			"start":   "flex-start",
			"center":  "center",
			"end":     "flex-end",
			"between": "space-between",
			"around":  "space-around"
		);
		$wrap: explode($wrap, "-");
		@if length($wrap) == 3 {
			flex-wrap: wrap-reverse;
			align-content: unquote(map-get($definition, nth($wrap, 3)));
		}
		@else {
			flex-wrap: wrap;
			align-content: unquote(map-get($definition, nth($wrap, 2)));
		}
	}
}

/// グリッドアイテムの幅
///
/// @since 1.2.0
///
/// @param {string | number} $columns ["auto"]
/// 	<table class="item__parameters" style="margin-top: -.4em">
/// 		<thead><tr><th>値</th><th>説明</th></tr></thead>
/// 		<tbody>
/// 			<tr>
/// 				<td>`"auto"`</td>
/// 				<td>内包するコンテンツに応じる</td>
/// 			</tr>
/// 			<tr>
/// 				<td>`{number}`</td>
/// 				<td>`$base-grid-columns`に対する割合</td>
/// 			</tr>
/// 		</tbody>
/// 	</table>
/// @param {number} $grid-columns [$base-grid-columns]
/// 	グリッドの総カラム数
///
/// @example scss
///		.grid-item {
///			@include grid-columns(12);
///		}
///
///		// CSS Output
///		.grid-item {
///			max-width: 50%;
///			flex: 0 0 50%;
///		}

@mixin grid-columns($columns: "auto", $grid-columns: $base-grid-columns) {
	$columns: if($columns == null, "auto", $columns);
	@if $columns == "auto" {
		max-width: 100%;
		flex: 0 0 auto;
	}
	@else {
		$width: percentage($columns / $grid-columns);
		max-width: $width;
		flex: 0 0 $width;
	}
}

/// グリッドアイテムのオフセット
///
/// @since 1.2.0
///
/// @param {number} $offset [0]
/// 	オフセットさせるカラム数
/// @param {number} $grid-columns [$base-grid-columns]
/// 	グリッドの総カラム数
///
/// @example scss
///		.grid-item {
///			@include grid-offset(12);
///		}
///
///		// CSS Output
///		.grid-item {
///			margin-left: 50%;
///		}

@mixin grid-offset($offset: 0, $grid-columns: $base-grid-columns) {
	$offset: if($offset == null, 0, $offset);
	margin-left: if($offset == 0, 0, percentage($offset / $grid-columns));
}

/// カラムの順番
///
/// @since 1.2.0
///
/// @param {number} $order [0]
/// 	オーダー番号
///
/// @example scss
///		.grid-item {
///			@include grid-order(1);
///		}
///
///		// CSS Output
///		.grid-item {
///			order: 1;
///		}

@mixin grid-order($order: 0) {
	$order: if($order == null, 0, $order);
	order: $order;
}

/// Gutters
///
/// @since 1.2.0
///
/// @param {string} $type
/// 	動作設定
/// <table class="item__parameters">
/// 	<thead>
/// 		<tr>
/// 			<th>値</th>
/// 			<th>説明</th>
/// 		</tr>
/// 	</thead>
/// 	<tbody>
/// 		<tr>
/// 			<td>`"container"`</td>
/// 			<td>コンテナー用にスタイルを出力する</td>
/// 		</tr>
/// 		<tr>
/// 			<td>`"item"`</td>
/// 			<td>アイテム用にスタイルを出力する</td>
/// 		</tr>
/// 	</tbody>
/// </table>
/// @param {number} $gutter-width [$base-grid-gutter-width]
/// 	スペースの幅
///
/// @example scss
/// 	.grid-container {
/// 		@include gutters("container", 30px);
/// 	}
/// 	.grid-item {
/// 		@include gutters("item", 30px);
/// 	}
///
/// 	// CSS Output
/// 	.grid-container {
/// 		margin-left: -15px;
/// 		margin-right: -15px;
/// 	}
/// 	.grid-item {
/// 		padding-left: 15px;
/// 		padding-right: 15px;
/// 	}

@mixin grid-gutters($type, $gutter-width: $base-grid-gutter-width) {
	$gutter-width: if($gutter-width == null, $base-grid-gutter-width, $gutter-width);
	@if $type == "container" {
		margin-right: $gutter-width / -2;
		margin-left: $gutter-width / -2;
	}
	@elseif $type == "item" {
		padding-right: $gutter-width / 2;
		padding-left: $gutter-width / 2;
	}
}
