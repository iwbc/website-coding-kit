@charset "utf-8";

////
/// @group ユーティリティ
////

/// 指定した色名のカラーコードを取得する
///
/// @since 1.0.0
///
/// @param {string} $key
/// 	色名
///
/// @return {color}
///
/// @example scss
/// 	$colors: ("black": #000, "white": #fff);
/// 	@debug get-color("black"); // #000

@function color($key) {
	@return map-get($colors, $key);
}

/// 文字列を分割し、リストで返す
///
/// @since 1.2.0
///
/// @param {string} $string
/// 	分割対象の文字列
/// @param {string} $separator
/// 	区切り文字
///
/// @return {list}
///
/// @example scss
/// 	@debug explode("2000-01-01", "-"); // ("2000" "01" "01")

@function explode($string, $separator) {
	$list: ();
	$sum: str-length($string);

	@for $i from 1 through $sum {
		$str: str-index($string, $separator);

		@if str-length($string) >= 1 and $str == null {
			$list: append($list, $string);
			$string: "";
		}

		@if type-of($str) == "number" {
			$each: str-slice($string, 0, ($str - 1));
			$list: append($list, $each);
			$string: str-slice($string, ($str + 1), $sum);
		}
	}

	@return $list;
}

/// 数値から単位を取り除く
///
/// @since 1.0.0
///
/// @param {number} $number
/// 	単位付きの数値
///
/// @return {number}
/// 	単位を取り除いた数値
///
/// @example scss
/// 	@debug strip-unit(12px); // 12

@function strip-unit($number) {
	@return $number / ($number * 0 + 1);
}
